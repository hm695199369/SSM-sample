<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd ">


	<!--组件扫描 -->
	<context:component-scan base-package="com.demo" />
<!-- 	加载数据库属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />
<!-- 	强制使用cglib生成代理组件 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
<!-- 	<mvc:view-controller path="/index" view-name="index" /> -->
	
	<!-- springmvc专门扫描控制层 -->
	<context:component-scan base-package="com.demo.controller" />
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=utf-8</value>
						<value>application/xml</value>
						<value>text/xml</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="prefix" value="/WEB-INF/static/pages/" />
   		<property name="suffix" value=".jsp" />
   	</bean>
	
	<mvc:resources mapping="/img/**" location="/WEB-INF/static/img/" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/static/css/" />
	<mvc:resources mapping="/js/**" location="/WEB-INF/static/js/" />
	<mvc:resources mapping="/upimg/**" location="/WEB-INF/static/upimg/" />
	<mvc:resources mapping="/bootstrap-3.3.7-dist/**" location="/WEB-INF/static/bootstrap-3.3.7-dist/" />
	
	
	
<!-- 	1、定义数据源:此处采用alibaba druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.jdbcUrl}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
<!-- 	2、mybatis工厂配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="configLocation" value="classpath:mybatis.xml" /> <!-- 	设置MyBatis配置文件 -->
 		<property name="dataSource" ref="dataSource" /><!--设置数据源 -->
<!-- 		它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值。 -->
		<property name="mapperLocations" value="classpath:/mappings/*.xml" />
		<property name="typeAliasesPackage" value="com.demo.bean" /> <!-- 跟mybatis中<typeAliases>作用一样 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>helperDialect=mysql</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

<!-- 	3、spring与mybatis整合配置，扫描所有dao，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	<property name="basePackage" value="com.demo.dao" /><!-- 设置Mapper扫描包,注意扫描的是dao接口,不是xml -->
	</bean>

<!-- 	4、定义JDBC事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

<!-- 	5、配置事务，规定哪些方法需要事务功能，事务传播行为和隔离级别 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

<!-- 	6、定义切入点，哪些类的哪些方法需要事务支持 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.demo.service.*.*(..))" />
	</aop:config>


<!-- 	7、开启事务注解扫描，扫描业务层上的@Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />


</beans>